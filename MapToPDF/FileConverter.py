# Copyright 2017 The TensorFlow Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

"""
    Kubernetes
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501
    The version of the OpenAPI document: release-1.16
    Generated by: https://openapi-generator.tech
"""
import sys,os
import multiprocessing
from docx2pdf import convert
from PIL import Image

class FileConverter:
   """ This class provides utility functions"""

   def __init__(self, path):
        """Deletes placeholder for input"""
        self.path = path
        self.files_to_pdf(path)

   def files_to_pdf(self, path):
        jobs = []
        os.mkdirs(path + "\\" + "resultat")
        """Deletes placeholder for input"""
        for filename in os.listdir(path):
            if filename.endswith(".docx") or filename.endswith(".doc"):
                file = path + "\\" + filename
                process = multiprocessing.Process(self.word_to_pdf(file, path))
                jobs.append(process)
                process.start()
                continue
            elif filename.endswith(".jpg") or filename.endswith(".PNG")  or filename.endswith(".png"):
                file = path + "\\" + filename
                process = multiprocessing.Process(self.image_to_pdf(file))
                jobs.append(process)
                process.start()
                continue
            else:
                continue

        for job in jobs:
            job.join()

   def word_to_pdf(self, file, path):
       """Deletes placeholder for input"""
       convert(file, path + "\\" + "resultat")

   def image_to_pdf(self, file):
       """Deletes placeholder for input"""
       image1 = Image.open(file)
       im1 = image1.convert('RGB')
       im1.save(path + "\\" + "resultat" + "\\" + filename + ".pdf")
